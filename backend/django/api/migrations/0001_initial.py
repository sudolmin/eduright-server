# Generated by Django 4.1.1 on 2022-10-01 04:12

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('icon', models.ImageField(blank=True, default='default.png', help_text='Min size should be 128x128, and try not to exceed maximum size>25kb.', null=True, upload_to='categoryicons/', verbose_name='Category Icon')),
                ('rank', models.IntegerField(default=0, help_text='The rank of category will signify the order at which, categories will be shown in grid view. Ex. rank 0 will be up rank 4 will be down. Default is 0.')),
                ('subjectSlug', models.SlugField(blank=True, help_text='You dont need to fill this field. It will be filled automatically', null=True, unique=True)),
                ('datahash', models.CharField(blank=True, help_text='It will get calculated automatically', max_length=150, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClassModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('standard', models.CharField(max_length=50)),
                ('icon', models.ImageField(blank=True, default='default.png', help_text='Min size should be 128x128, and try not to exceed maximum size>25kb.', null=True, upload_to='classicons/', verbose_name='Class Icon')),
                ('rank', models.IntegerField(default=0, help_text='The rank of class will signify the order at which, classes will be shown in grid view. Ex. rank 0 will be up rank 4 will be down. Default is 0.')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topicTitle', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='QuizDifficulty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='QuizSetTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topicTitle', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('fullName', models.CharField(max_length=75)),
                ('auth_Token', models.CharField(blank=True, max_length=40, null=True)),
            ],
            options={
                'verbose_name': 'Staff',
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Units',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_Name', models.CharField(max_length=100)),
                ('rank', models.IntegerField(default=0, help_text='The rank of unit will signify the order at which, units will be shown in list view. Ex. rank 0 will be up rank 4 will be down. Default is 0.')),
                ('datahash', models.CharField(blank=True, help_text='It will get calculated automatically', max_length=32, null=True)),
                ('category', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='unitcategory', to='api.category')),
            ],
        ),
        migrations.CreateModel(
            name='Topics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic_Name', models.CharField(max_length=100)),
                ('rank', models.IntegerField(default=0, help_text='The rank of topic will signify the order at which, topics will be shown in list view. Ex. rank 0 will be up rank 4 will be down. Default is 0.')),
                ('slug', models.SlugField(blank=True, help_text='You dont need to fill this field. It will be filled automatically', null=True, unique=True)),
                ('datahash', models.CharField(blank=True, help_text='It will get calculated automatically', max_length=32, null=True)),
                ('unit', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='topicunit', to='api.units')),
            ],
        ),
        migrations.CreateModel(
            name='QuizSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quizTitle', models.CharField(max_length=50, verbose_name='Title')),
                ('max_marks', models.PositiveIntegerField(blank=True, null=True)),
                ('mark_per_question', models.PositiveIntegerField(blank=True, null=True)),
                ('negative_marking', models.PositiveIntegerField(blank=True, null=True)),
                ('timeLimit', models.PositiveIntegerField(blank=True, help_text='Time in seconds(e.g-15mins->15*60=900)', null=True)),
                ('description', models.TextField(blank=True, help_text='This description will be displayed when student will be given instructions for the quiz.', null=True)),
                ('setSlug', models.SlugField(blank=True, help_text='You dont need to fill this field. It will be filled automatically', null=True, unique=True)),
                ('date_created', models.DateField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='categoryquizset', to='api.category', verbose_name='Category')),
                ('difficulty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='difficultyquizset', to='api.quizdifficulty', verbose_name='Difficulty')),
                ('quiztopic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quizsettopics', to='api.quizsettopic', verbose_name='Quiz Topic')),
                ('set_Modifier', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby', to='api.staff')),
                ('submitter', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby', to='api.staff')),
                ('topic', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='topicquizset', to='api.topics', verbose_name='Topic')),
            ],
            options={
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(blank=True, help_text='Example- [IIT-Mains 2019].', max_length=75, null=True)),
                ('lateX', models.BooleanField(default=False, help_text='Whether the question contain TeX format (default is "False").')),
                ('quesText', models.TextField(verbose_name='Question')),
                ('imageQuestion', models.ImageField(blank=True, help_text='Min size should be 128x128, and try not to exceed maximum size>100kb.', null=True, upload_to='questions/', verbose_name='Question Image')),
                ('imageHeight', models.PositiveIntegerField(default=200, help_text='If the question contains image. The height of image can be adjusted here.(Default is 200[in px])')),
                ('difficulty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='difficultyquestion', to='api.quizdifficulty', verbose_name='Difficulty')),
                ('quesTopic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questionTopics', to='api.questiontopic', verbose_name='Question Topic')),
                ('quizset', models.ManyToManyField(related_name='questions', to='api.quizset', verbose_name='Set Name')),
            ],
        ),
        migrations.AddField(
            model_name='category',
            name='classModel',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='api.classmodel', verbose_name='Class'),
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lateX', models.BooleanField(default=False, help_text='Whether the question contain TeX format (default is "False").')),
                ('option', models.TextField(blank=True, null=True, verbose_name='option')),
                ('correct', models.BooleanField(verbose_name='correct')),
                ('imageOption', models.ImageField(blank=True, help_text='Min size should be 128x128, and try not to exceed maximum size>100kb.', null=True, upload_to='answeroptions/', verbose_name='Option Image')),
                ('imageHeight', models.PositiveIntegerField(default=100, help_text='If the answer contains image. The height of image can be adjusted here.(Default is 100[in px])')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='api.question', verbose_name='Question')),
            ],
        ),
    ]
